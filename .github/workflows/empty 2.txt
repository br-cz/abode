import { Message } from 'node-nats-streaming';
import mongoose from 'mongoose';
import { FragCreatedEvent } from '@abodeorg/common';
import { FragCreatedListener } from '../frag-created-listener';
import { natsWrapper } from '../../../nats-wrapper';
import { Fragrance } from '../../../models/frag';

//reusable setup for future use perhaps
const setup = async () => {
  // create an instance of the listener
  const listener = new FragCreatedListener(natsWrapper.client);

  // create a fake data event
  const data: FragCreatedEvent['data'] = {
    version: 0,
    id: new mongoose.Types.ObjectId().toHexString(),
    title: 'concert',
    price: 10,
    userId: new mongoose.Types.ObjectId().toHexString(), //to hex string for valid ids for mongoose
  };

  // create a fake message object, tells ts to pretend its a message via
  // @ts-ignore
  const msg: Message = {
    ack: jest.fn(),
  };

  return { listener, data, msg };
};

it('creates and saves a frag', async () => {
  const { listener, data, msg } = await setup();

  // call the onMessage function with the data object + message object
  await listener.onMessage(data, msg);

  // write assertions to make sure a frag was created!
  const frag = await Fragrance.findById(data.id);

  expect(frag).toBeDefined();
  expect(frag!.title).toEqual(data.title);
  expect(frag!.price).toEqual(data.price);
});

it('acks the message', async () => {
  // call the onMessage function with the data object + message object
  // write assertions to make sure ack function is called
});
